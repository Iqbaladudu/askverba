/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    customers: CustomerAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    customers: Customer;
    vocabulary: Vocabulary;
    'translation-history': TranslationHistory;
    'practice-sessions': PracticeSession;
    achievements: Achievement;
    'user-achievements': UserAchievement;
    'user-preferences': UserPreference;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    customers: CustomersSelect<false> | CustomersSelect<true>;
    vocabulary: VocabularySelect<false> | VocabularySelect<true>;
    'translation-history': TranslationHistorySelect<false> | TranslationHistorySelect<true>;
    'practice-sessions': PracticeSessionsSelect<false> | PracticeSessionsSelect<true>;
    achievements: AchievementsSelect<false> | AchievementsSelect<true>;
    'user-achievements': UserAchievementsSelect<false> | UserAchievementsSelect<true>;
    'user-preferences': UserPreferencesSelect<false> | UserPreferencesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Customer & {
        collection: 'customers';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface CustomerAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vocabulary".
 */
export interface Vocabulary {
  id: string;
  customer: string | Customer;
  word: string;
  translation: string;
  pronunciation?: string | null;
  definition?: string | null;
  example?: string | null;
  difficulty?: ('easy' | 'medium' | 'hard') | null;
  status?: ('new' | 'learning' | 'mastered') | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  practiceCount?: number | null;
  /**
   * Accuracy percentage (0-100)
   */
  accuracy?: number | null;
  lastPracticed?: string | null;
  sourceLanguage?: string | null;
  targetLanguage?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "translation-history".
 */
export interface TranslationHistory {
  id: string;
  customer: string | Customer;
  originalText: string;
  translatedText: string;
  sourceLanguage: string;
  targetLanguage: string;
  mode: 'simple' | 'detailed';
  characterCount: number;
  /**
   * Translation confidence percentage
   */
  confidence?: number | null;
  isFavorite?: boolean | null;
  /**
   * Stores the full detailed translation result for complex translations
   */
  detailedResult?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Time taken to process the translation
   */
  processingTime?: number | null;
  aiModel?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "practice-sessions".
 */
export interface PracticeSession {
  id: string;
  customer: string | Customer;
  sessionType: 'flashcard' | 'multiple_choice' | 'fill_blanks' | 'listening' | 'mixed';
  words?:
    | {
        vocabularyId: string;
        isCorrect?: boolean | null;
        timeSpent: number;
        attempts: number;
        userAnswer?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Score percentage (0-100)
   */
  score: number;
  /**
   * Time spent in seconds
   */
  timeSpent: number;
  difficulty?: ('easy' | 'medium' | 'hard') | null;
  metadata?: {
    totalQuestions?: number | null;
    correctAnswers?: number | null;
    averageTimePerQuestion?: number | null;
    streakCount?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements".
 */
export interface Achievement {
  id: string;
  title: string;
  description: string;
  /**
   * Emoji or icon identifier
   */
  icon: string;
  /**
   * Unique identifier for the achievement
   */
  slug: string;
  category: 'practice' | 'translation' | 'vocabulary' | 'streak' | 'general';
  /**
   * Points awarded for this achievement
   */
  points: number;
  /**
   * Display order (lower numbers appear first)
   */
  order?: number | null;
  /**
   * Whether this achievement is currently available
   */
  isActive?: boolean | null;
  requirements?: {
    type?:
      | ('practice_sessions' | 'translation_count' | 'vocabulary_count' | 'streak_days' | 'accuracy' | 'time_spent')
      | null;
    value?: number | null;
    condition?: ('gte' | 'eq' | 'lte') | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-achievements".
 */
export interface UserAchievement {
  id: string;
  customer: string | Customer;
  achievement: string | Achievement;
  /**
   * Progress percentage (0-100)
   */
  progress: number;
  /**
   * When the achievement was unlocked (null if not unlocked)
   */
  unlockedAt?: string | null;
  /**
   * Whether the achievement has been unlocked
   */
  isUnlocked?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-preferences".
 */
export interface UserPreference {
  id: string;
  customer: string | Customer;
  language?: ('en' | 'id') | null;
  theme?: ('light' | 'dark' | 'system') | null;
  notifications?: {
    email?: boolean | null;
    push?: boolean | null;
    practice?: boolean | null;
    achievements?: boolean | null;
  };
  practiceSettings?: {
    defaultDifficulty?: ('easy' | 'medium' | 'hard') | null;
    /**
     * Default practice session length in minutes
     */
    sessionLength?: number | null;
    /**
     * Automatically speak words during practice
     */
    autoSpeak?: boolean | null;
    /**
     * Show hints during practice
     */
    showHints?: boolean | null;
  };
  translationSettings?: {
    defaultMode?: ('simple' | 'detailed') | null;
    autoExtractVocabulary?: boolean | null;
    saveHistory?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'customers';
        value: string | Customer;
      } | null)
    | ({
        relationTo: 'vocabulary';
        value: string | Vocabulary;
      } | null)
    | ({
        relationTo: 'translation-history';
        value: string | TranslationHistory;
      } | null)
    | ({
        relationTo: 'practice-sessions';
        value: string | PracticeSession;
      } | null)
    | ({
        relationTo: 'achievements';
        value: string | Achievement;
      } | null)
    | ({
        relationTo: 'user-achievements';
        value: string | UserAchievement;
      } | null)
    | ({
        relationTo: 'user-preferences';
        value: string | UserPreference;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'customers';
        value: string | Customer;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'customers';
        value: string | Customer;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vocabulary_select".
 */
export interface VocabularySelect<T extends boolean = true> {
  customer?: T;
  word?: T;
  translation?: T;
  pronunciation?: T;
  definition?: T;
  example?: T;
  difficulty?: T;
  status?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  practiceCount?: T;
  accuracy?: T;
  lastPracticed?: T;
  sourceLanguage?: T;
  targetLanguage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "translation-history_select".
 */
export interface TranslationHistorySelect<T extends boolean = true> {
  customer?: T;
  originalText?: T;
  translatedText?: T;
  sourceLanguage?: T;
  targetLanguage?: T;
  mode?: T;
  characterCount?: T;
  confidence?: T;
  isFavorite?: T;
  detailedResult?: T;
  processingTime?: T;
  aiModel?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "practice-sessions_select".
 */
export interface PracticeSessionsSelect<T extends boolean = true> {
  customer?: T;
  sessionType?: T;
  words?:
    | T
    | {
        vocabularyId?: T;
        isCorrect?: T;
        timeSpent?: T;
        attempts?: T;
        userAnswer?: T;
        id?: T;
      };
  score?: T;
  timeSpent?: T;
  difficulty?: T;
  metadata?:
    | T
    | {
        totalQuestions?: T;
        correctAnswers?: T;
        averageTimePerQuestion?: T;
        streakCount?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements_select".
 */
export interface AchievementsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  icon?: T;
  slug?: T;
  category?: T;
  points?: T;
  order?: T;
  isActive?: T;
  requirements?:
    | T
    | {
        type?: T;
        value?: T;
        condition?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-achievements_select".
 */
export interface UserAchievementsSelect<T extends boolean = true> {
  customer?: T;
  achievement?: T;
  progress?: T;
  unlockedAt?: T;
  isUnlocked?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-preferences_select".
 */
export interface UserPreferencesSelect<T extends boolean = true> {
  customer?: T;
  language?: T;
  theme?: T;
  notifications?:
    | T
    | {
        email?: T;
        push?: T;
        practice?: T;
        achievements?: T;
      };
  practiceSettings?:
    | T
    | {
        defaultDifficulty?: T;
        sessionLength?: T;
        autoSpeak?: T;
        showHints?: T;
      };
  translationSettings?:
    | T
    | {
        defaultMode?: T;
        autoExtractVocabulary?: T;
        saveHistory?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}